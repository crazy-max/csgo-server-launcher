name: test

on:
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

jobs:
  install:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant:
          - 'debian:buster'
          - 'debian:bullseye'
          - 'ubuntu:20.04'
          - 'ubuntu:21.10'
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Create Dockerfile
        run: |
          mkdir -p test-install
          cp install.sh ./test-install/
          cat > ./test-install/Dockerfile <<EOL
          FROM ${{ matrix.variant }}
          COPY install.sh /install.sh
          ENV CSGOSL_VERSION=dev
          ENV CSGOSL_DOWNLOAD_URL=https://raw.githubusercontent.com/crazy-max/csgo-server-launcher/master
          RUN /install.sh
          EOL
      -
        name: Test
        uses: docker/build-push-action@v3
        with:
          context: ./test-install
          outputs: type=cacheonly

  docker:
    if: ${{ false }}  # disable for now
    runs-on: ubuntu-latest
    steps:
      -
        name: Prepare
        id: prep
        run: |
          echo ::set-output name=build_tag::test
          echo ::set-output name=container_name::csgo-server-launcher
          echo ::set-output name=running_timeout::2400
          echo ::set-output name=running_log_check::Connection to Steam servers successful
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Docker Build
        run: |
          docker build --tag ${{ steps.prep.outputs.build_tag }} --file Dockerfile .
      -
        name: Start container
        run: |
          docker rm -f ${{ steps.prep.outputs.container_name }} > /dev/null 2>&1 || true
          docker run -d --name ${{ steps.prep.outputs.container_name }} \
            --ulimit nproc=65535 \
            --ulimit nofile=32000:40000 \
            -p 27015:27015 \
            -p 27015:27015/udp \
            ${{ steps.prep.outputs.build_tag }}
      -
        name: Test run
        run: |
          TIMEOUT=$((SECONDS + ${{ steps.prep.outputs.running_timeout }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ steps.prep.outputs.running_log_check }}"* ]]; then
              echo "🎉 Container up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "❌ Failed to run ${{ steps.prep.outputs.container_name }} container"
              exit 1
            fi
          done < <(docker logs -f ${{ steps.prep.outputs.container_name }} 2>&1)

          CONTAINER_STATUS=$(docker container inspect --format "{{.State.Status}}" ${{ steps.prep.outputs.container_name }})
          if [[ ${CONTAINER_STATUS} != "running" ]]; then
            >&2 echo "❌ Container ${{ steps.prep.outputs.container_name }} returned status '$CONTAINER_STATUS'"
            exit 1
          fi
      -
        name: Container logs
        if: always()
        run: |
          docker logs ${{ steps.prep.outputs.container_name }}
          docker rm -f ${{ steps.prep.outputs.container_name }} > /dev/null 2>&1 || true
