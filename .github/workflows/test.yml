name: test

on:
  push:
    branches-ignore:
      - '**'
#on:
#  pull_request:
#    branches: 'master'
#    paths:
#      - '.github/workflows/test.yml'
#      - 'csgo-server-launcher*'
#      - 'Dockerfile'
#      - 'entrypoint.sh'
#      - 'install.sh'
#  push:
#    branches: 'master'
#    paths:
#      - '.github/workflows/test.yml'
#      - 'csgo-server-launcher*'
#      - 'Dockerfile'
#      - 'entrypoint.sh'
#      - 'install.sh'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      -
        name: Prepare
        id: prepare
        run: |
          echo ::set-output name=build_tag::test
          echo ::set-output name=container_name::csgo-server-launcher
          echo ::set-output name=running_timeout::2400
          echo ::set-output name=running_log_check::Connection to Steam servers successful
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Docker Build
        run: |
          docker build --tag ${{ steps.prepare.outputs.build_tag }} --file Dockerfile .
      -
        name: Start container
        run: |
          docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
          docker run -d --name ${{ steps.prepare.outputs.container_name }} \
            --ulimit nproc=65535 \
            --ulimit nofile=32000:40000 \
            -p 27015:27015 \
            -p 27015:27015/udp \
            ${{ steps.prepare.outputs.build_tag }}
      -
        name: Test run
        run: |
          TIMEOUT=$((SECONDS + ${{ steps.prepare.outputs.running_timeout }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ steps.prepare.outputs.running_log_check }}"* ]]; then
              echo "🎉 Container up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "❌ Failed to run ${{ steps.prepare.outputs.container_name }} container"
              exit 1
            fi
          done < <(docker logs -f ${{ steps.prepare.outputs.container_name }} 2>&1)

          CONTAINER_STATUS=$(docker container inspect --format "{{.State.Status}}" ${{ steps.prepare.outputs.container_name }})
          if [[ ${CONTAINER_STATUS} != "running" ]]; then
            >&2 echo "❌ Container ${{ steps.prepare.outputs.container_name }} returned status '$CONTAINER_STATUS'"
            exit 1
          fi
      -
        name: Container logs
        if: always()
        run: |
          docker logs ${{ steps.prepare.outputs.container_name }}
          docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
